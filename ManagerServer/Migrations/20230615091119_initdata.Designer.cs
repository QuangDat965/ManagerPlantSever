// <auto-generated />
using System;
using ManagerServer.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManagerServer.Migrations
{
    [DbContext(typeof(ManagerDbContext))]
    [Migration("20230615091119_initdata")]
    partial class initdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManagerServer.Database.Entity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("is_ative")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.DataDeviceResponseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DataDeviceId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuringDeviceEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeRetrieve")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeasuringDeviceEntityId");

                    b.ToTable("DataDeviceResponseEntities");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.DeviceActionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProblem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZoneEntityId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneEntityId");

                    b.ToTable("DeviceActionEntities");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.DeviceActionLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeviceActionId")
                        .HasColumnType("int");

                    b.Property<int?>("DeviceMeasureId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("bit");

                    b.Property<bool>("NumberChangeAuto")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ValueDeviceMeasure")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DeviceActionId");

                    b.HasIndex("DeviceMeasureId");

                    b.ToTable("DeviceActionLogEntities");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.FarmEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("FarmEntities");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.MeasuringDeviceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataDeviceResponsesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProblem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZoneEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataDeviceResponsesId");

                    b.HasIndex("ZoneEntityId");

                    b.ToTable("MeasuringDeviceEntities");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.StatisticalDataResponseForDayEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AvgValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateRetrive")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeviceMeasureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<int?>("MeasuringDeviceEntityId")
                        .HasColumnType("int");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeasuringDeviceEntityId");

                    b.ToTable("StatisticalDataResponseForDayEntities");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.StatisticalDataResponseForHourEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AvgValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateRetrive")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeviceMeasureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<int?>("MeasuringDeviceEntityId")
                        .HasColumnType("int");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeasuringDeviceEntityId");

                    b.ToTable("StatisticalDataResponseForHourEntities");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.StatisticalDataResponseForMonthEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AvgValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateRetrive")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeviceMeasureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<int?>("MeasuringDeviceEntityId")
                        .HasColumnType("int");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeasuringDeviceEntityId");

                    b.ToTable("StatisticalDataResponseForMonthEntities");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.StatisticalDataResponseForWeekEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AvgValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateRetrive")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeviceMeasureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<int?>("MeasuringDeviceEntityId")
                        .HasColumnType("int");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeasuringDeviceEntityId");

                    b.ToTable("StatisticalDataResponseForWeekEntities");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.ZoneEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FarmEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("FarmId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FarmEntityId");

                    b.ToTable("ZoneEntities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.DataDeviceResponseEntity", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.MeasuringDeviceEntity", null)
                        .WithMany("DataDeviceResponses")
                        .HasForeignKey("MeasuringDeviceEntityId");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.DeviceActionEntity", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.ZoneEntity", null)
                        .WithMany("DeviceActions")
                        .HasForeignKey("ZoneEntityId");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.DeviceActionLogEntity", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.DeviceActionEntity", "DeviceAction")
                        .WithMany("DeviceActionLog")
                        .HasForeignKey("DeviceActionId");

                    b.HasOne("ManagerServer.Database.Entity.MeasuringDeviceEntity", "MeasuringDevice")
                        .WithMany()
                        .HasForeignKey("DeviceMeasureId");

                    b.Navigation("DeviceAction");

                    b.Navigation("MeasuringDevice");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.FarmEntity", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.AppUser", null)
                        .WithMany("Farms")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.MeasuringDeviceEntity", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.DeviceActionLogEntity", "DeviceActionLog")
                        .WithMany()
                        .HasForeignKey("DataDeviceResponsesId");

                    b.HasOne("ManagerServer.Database.Entity.ZoneEntity", null)
                        .WithMany("MeasuringDevices")
                        .HasForeignKey("ZoneEntityId");

                    b.Navigation("DeviceActionLog");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.StatisticalDataResponseForDayEntity", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.MeasuringDeviceEntity", null)
                        .WithMany("StatisticalDataResponsesForDays")
                        .HasForeignKey("MeasuringDeviceEntityId");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.StatisticalDataResponseForHourEntity", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.MeasuringDeviceEntity", null)
                        .WithMany("StatisticalDataResponsesForHours")
                        .HasForeignKey("MeasuringDeviceEntityId");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.StatisticalDataResponseForMonthEntity", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.MeasuringDeviceEntity", null)
                        .WithMany("StatisticalDataResponsesForMonth")
                        .HasForeignKey("MeasuringDeviceEntityId");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.StatisticalDataResponseForWeekEntity", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.MeasuringDeviceEntity", null)
                        .WithMany("StatisticalDataResponsesForWeek")
                        .HasForeignKey("MeasuringDeviceEntityId");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.ZoneEntity", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.FarmEntity", null)
                        .WithMany("Zones")
                        .HasForeignKey("FarmEntityId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerServer.Database.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ManagerServer.Database.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.AppUser", b =>
                {
                    b.Navigation("Farms");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.DeviceActionEntity", b =>
                {
                    b.Navigation("DeviceActionLog");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.FarmEntity", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.MeasuringDeviceEntity", b =>
                {
                    b.Navigation("DataDeviceResponses");

                    b.Navigation("StatisticalDataResponsesForDays");

                    b.Navigation("StatisticalDataResponsesForHours");

                    b.Navigation("StatisticalDataResponsesForMonth");

                    b.Navigation("StatisticalDataResponsesForWeek");
                });

            modelBuilder.Entity("ManagerServer.Database.Entity.ZoneEntity", b =>
                {
                    b.Navigation("DeviceActions");

                    b.Navigation("MeasuringDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
